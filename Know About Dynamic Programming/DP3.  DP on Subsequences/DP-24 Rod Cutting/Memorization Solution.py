# We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has a particular price given by the
# price array. Our task is to find the maximum revenue that can be generated by selling the rod after cutting(
# if required) into pieces.

# a = [2,5,7,8,10] , N =5 Maximum price will earn  by breaking the rod into this manner
# 2(1 piece) + 5(2 piece) + 5(2 piece) => 12
#  we have a rod of length 3, we will have 23-1 = 4 ways to cut the rod ( as we can cut the rod at (3-1) places and at
#  every place we have 2 options, to cut it or not).

# Base Cases:
# If ind==0, it means we are considering a rod of length 1. Its price is given by price[0]. Now for length N, the number
# of rod pieces of length 1 will be N (N/1). Therefore we will return the maximum revenue generated,i.e ‘N*price[0]’.

# Time Complexity: O(N*N)
# Reason: There are N*(N+1) states therefore at max ‘N*(N+1)’ new problems will be solved.
# Space Complexity: O(N*N) + O(N)

def maxPricebyRodCutting(ind, price, N, n):
    dp = [[-1 for _ in range(N + 1)] for _ in range(n)]
    if ind == 0:
        return N * price[0]
    if dp[ind][N] != -1: return dp[ind][N]

    notPick = 0 + maxPricebyRodCutting(ind - 1, price, N, n)
    pick = float('-inf')
    rodLength = ind + 1
    if rodLength <= N:
        pick = price[ind] + maxPricebyRodCutting(ind, price, N - rodLength, n)

    dp[ind][N] = max(pick, notPick)
    return dp[ind][N]


price = [2, 5, 7, 8, 10]
n = len(price)
print("The Maximum price generated is", maxPricebyRodCutting(n - 1, price, n, n))
